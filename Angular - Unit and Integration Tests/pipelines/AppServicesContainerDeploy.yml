trigger:
  - none

pool:
  vmImage: ubuntu-latest

variables:
  frontPath: "./EmployeeCrudAngular"
  backPath: "./EmployeeCrudApi"

  nodeVersion: "18.19.0"
  solution: "**/*.sln"
  buildConfiguration: "Release"
  azureSubs: "Azure subscription 1(9a4dd3e5-d25c-4610-b198-5b4caf20a81b)"
  azureResourceManager: "Azure Resource Manager subscription 1"

  acrLoginServer: "crtp8.azurecr.io"
  acrName: "crtp8"
  backImageName: "vgaggio-employee-crud-api"
  frontImageName: "vgaggio-employee-crud-front"

  appServicePlanLinux: "VGaggioAppServicePlan"
  webAppBackContainerNameQA: "vgaggio-webapp-container-employee-crud-back-qa"
  webAppFrontContainerNameQA: "vgaggio-webapp-container-employee-crud-front-qa"
  webAppBackContainerNamePROD: "vgaggio-webapp-container-employee-crud-back-prod"
  webAppFrontContainerNamePROD: "vgaggio-webapp-container-employee-crud-front-prod"

  resourceGroupName: "trabajo-practico-08"
  backImageTag: "latest"
  frontImageTag: "latest"

stages:
  - stage: Build
    displayName: "Build Back-End and Front-End"
    dependsOn: []
    jobs:
      - job: BackEnd
        displayName: "Back-End"
        dependsOn: []
        steps:
          - task: DotNetCoreCLI@2
            displayName: "Restore NuGet Packages"
            inputs:
              command: restore
              projects: "$(solution)"

          - task: DotNetCoreCLI@2
            displayName: "Build Back-End Solution"
            inputs:
              command: build
              projects: "$(solution)"
              arguments: "--configuration $(buildConfiguration)"

          - script: |
              dotnet publish $(solution) --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/api/ --no-build
            displayName: "Publish Back-End"

          - task: PublishBuildArtifacts@1
            displayName: "Publish Back-End Artifacts"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "backend-drop"
              publishLocation: "Container"

          - task: PublishPipelineArtifact@1
            displayName: "Publish Docker Back-End Artifacts"
            inputs:
              targetPath: "$(Build.SourcesDirectory)/docker/backend/Dockerfile"
              artifact: "dockerfile-back"

      - job: FrontEnd
        displayName: "Front-End"
        dependsOn: []
        steps:
          - task: UseNode@1
            displayName: "Install Node.js"
            inputs:
              version: "$(nodeVersion)"

          - script: |
              npm config set fund false
              npm install -g @angular/cli --no-audit
              npm install --no-audit
            displayName: "Install Front-End Dependencies"
            workingDirectory: $(frontPath)

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | $(frontPath)/package-lock.json'
              path: "$(frontPath)/node_modules"
              restoreKeys: |
                npm | "$(Agent.OS)"
            displayName: "Cache dependences"

          - script: |
              ng build --configuration production
            displayName: "Build Front-End Application"
            workingDirectory: $(frontPath)

          - task: PublishBuildArtifacts@1
            displayName: "Publish Front-End Artifacts"
            inputs:
              PathtoPublish: "$(frontPath)/dist/employee-crud-angular/browser"
              ArtifactName: "frontend-drop"
              publishLocation: "Container"

          - task: PublishPipelineArtifact@1
            displayName: "Publish Docker Front-End Artifacts"
            inputs:
              targetPath: "$(Build.SourcesDirectory)/docker/frontend/Dockerfile"
              artifact: "dockerfile-front"

  - stage: DockerBuildAndPush
    displayName: "Build and Push Docker Images to ACR"
    dependsOn: [Build]
    jobs:
      - job: BackEnd
        displayName: "Back-End"
        pool:
          vmImage: ubuntu-latest

        steps:
          - checkout: self

          - task: DownloadPipelineArtifact@2
            displayName: "Download Backend Artifacts"
            inputs:
              buildType: "current"
              artifactName: "backend-drop"
              targetPath: "$(Pipeline.Workspace)/backend-drop"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Backend Dockerfile"
            inputs:
              buildType: "current"
              artifactName: "dockerfile-back"
              targetPath: "$(Pipeline.Workspace)/dockerfile-back"

          - task: AzureCLI@2
            displayName: "Login to Azure Container Registry (ACR)"
            inputs:
              azureSubscription: "$(azureResourceManager)"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az acr login --name $(acrLoginServer)

          - task: Docker@2
            displayName: "Build Docker Image for Backend"
            inputs:
              command: build
              repository: $(acrLoginServer)/$(backImageName)
              dockerfile: $(Pipeline.Workspace)/dockerfile-back/Dockerfile
              buildContext: $(Pipeline.Workspace)/backend-drop
              tags: "latest"

          - task: Docker@2
            displayName: "Push Backend Docker Image to ACR"
            inputs:
              command: push
              repository: $(acrLoginServer)/$(backImageName)
              tags: "latest"

      - job: FrontEnd
        displayName: "Front-End"
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Frontend Artifacts"
            inputs:
              buildType: "current"
              artifactName: "frontend-drop"
              targetPath: "$(Pipeline.Workspace)/frontend-drop"

          - task: DownloadPipelineArtifact@2
            displayName: "Download Frontend Dockerfile"
            inputs:
              buildType: "current"
              artifactName: "dockerfile-front"
              targetPath: "$(Pipeline.Workspace)/dockerfile-front"

          - task: AzureCLI@2
            displayName: "Login to Azure Container Registry (ACR)"
            inputs:
              azureSubscription: "$(azureResourceManager)"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az acr login --name $(acrLoginServer)

          - task: Docker@2
            displayName: "Build Docker Image for Frontend"
            inputs:
              command: build
              repository: $(acrLoginServer)/$(frontImageName)
              dockerfile: $(Pipeline.Workspace)/dockerfile-front/Dockerfile
              buildContext: $(Pipeline.Workspace)/frontend-drop
              tags: "latest"

          - task: Docker@2
            displayName: "Push Frontend Docker Image to ACR"
            inputs:
              command: push
              repository: $(acrLoginServer)/$(frontImageName)
              tags: "latest"

  - stage: DeployToAppServicesContainerQA
    displayName: "Deploy Images to App Services Container (QA)"
    dependsOn: [DockerBuildAndPush]
    jobs:
      - job: BackEnd
        displayName: "Back-End"
        dependsOn: []
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: AzureCLI@2
            displayName: "Verify and create the Azure App Service resource for BACK (QA)"
            inputs:
              azureSubscription: "$(azureResourceManager)"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                if ! az webapp list --query "[?name=='$(webAppBackContainerNameQA)' && resourceGroup=='$(resourceGroupName)'] | length(@)" -o tsv | grep -q '^1$'; then
                  echo "The App Service for Back-End (QA) does not exist. Creating..."
                  az webapp create --resource-group $(resourceGroupName) --plan $(appServicePlanLinux) --name $(webAppBackContainerNameQA) --deployment-container-image-name "nginx"
                else
                  echo "The App Service for Back-End (QA) already exists. Updating the image..."
                fi

                az webapp config container set --name $(webAppBackContainerNameQA) --resource-group $(resourceGroupName) \
                  --container-image-name $(acrLoginServer)/$(backImageName):$(backImageTag) \
                  --container-registry-url https://$(acrLoginServer) \
                  --container-registry-user $(acrName) \
                  --container-registry-password $(az acr credential show --name $(acrName) --query "passwords[0].value" -o tsv)

                az webapp config appsettings set --name $(webAppBackContainerNameQA) --resource-group $(resourceGroupName) \
                  --settings ConnectionStrings__DefaultConnection="$(cnn-string-qa)" \

      - job: FrontEnd
        displayName: "Front-End"
        dependsOn: []
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: AzureCLI@2
            displayName: "Verify and create the Azure App Service resource for FRONT (QA)"
            inputs:
              azureSubscription: "$(azureResourceManager)"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                if ! az webapp list --query "[?name=='$(webAppFrontContainerNameQA)' && resourceGroup=='$(resourceGroupName)'] | length(@)" -o tsv | grep -q '^1$'; then
                  echo "The App Service for Front-End (QA) does not exist. Creating..."
                  az webapp create --resource-group $(resourceGroupName) --plan $(appServicePlanLinux) --name $(webAppFrontContainerNameQA) --deployment-container-image-name "nginx"
                else
                  echo "The App Service for Front-End (QA) already exists. Updating the image..."
                fi

                az webapp config container set --name $(webAppFrontContainerNameQA) --resource-group $(resourceGroupName) \
                  --container-image-name $(acrLoginServer)/$(frontImageName):$(frontImageTag) \
                  --container-registry-url https://$(acrLoginServer) \
                  --container-registry-user $(acrName) \
                  --container-registry-password $(az acr credential show --name $(acrName) --query "passwords[0].value" -o tsv)

                az webapp config appsettings set --name $(webAppFrontContainerNameQA) --resource-group $(resourceGroupName) \
                  --settings API_URL="$(API_URL_QA)" \

      - job: IntegrationTesting
        displayName: "Integrations Tests"
        dependsOn: [BackEnd, FrontEnd]
        variables:
          baseUrl: "$(webAppFrontContainerNameQA).azurewebsites.net"

        steps:
          - script: |
              cd $(Build.SourcesDirectory)/EmployeeCrudAngular
              npm install typescript ts-node
            displayName: "Install TypeScript"

          - script: |
              cd $(Build.SourcesDirectory)/EmployeeCrudAngular
              npx cypress run --config-file cypress.config.ts --env baseUrl=$(baseUrl)
            displayName: "Run Cypress E2E Tests"

          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "$(Build.SourcesDirectory)/EmployeeCrudAngular/cypress/results/*.xml"
              testRunTitle: "Cypress E2E Tests (QA)"
            displayName: "Publish Cypress Test Results"

  - stage: DeployToAppServicesContainerPROD
    displayName: "Deploy Images to App Services Container (PROD)"
    dependsOn: [DeployToAppServicesContainerQA]
    jobs:
      - deployment: BackEnd
        displayName: "Back-End"
        environment: "Production"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: "Verify and create the Azure App Service resource for BACK (PROD)"
                  inputs:
                    azureSubscription: "$(azureResourceManager)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      if ! az webapp list --query "[?name=='$(webAppBackContainerNamePROD)' && resourceGroup=='$(resourceGroupName)'] | length(@)" -o tsv | grep -q '^1$'; then
                        echo "The App Service for Back-End (QA) does not exist. Creating..."
                        az webapp create --resource-group $(resourceGroupName) --plan $(appServicePlanLinux) --name $(webAppBackContainerNamePROD) --deployment-container-image-name "nginx"
                      else
                        echo "The App Service for Back-End (QA) already exists. Updating the image..."
                      fi

                      az webapp config container set --name $(webAppBackContainerNamePROD) --resource-group $(resourceGroupName) \
                        --container-image-name $(acrLoginServer)/$(backImageName):$(backImageTag) \
                        --container-registry-url https://$(acrLoginServer) \
                        --container-registry-user $(acrName) \
                        --container-registry-password $(az acr credential show --name $(acrName) --query "passwords[0].value" -o tsv)

                      az webapp config appsettings set --name $(webAppBackContainerNamePROD) --resource-group $(resourceGroupName) \
                        --settings ConnectionStrings__DefaultConnection="$(cnn-string-qa)" \

      - deployment: FrontEnd
        displayName: "Front-End"
        environment: "Production"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@2
                  displayName: "Verify and create the Azure App Service resource for FRONT (PROD)"
                  inputs:
                    azureSubscription: "$(azureResourceManager)"
                    scriptType: "bash"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      if ! az webapp list --query "[?name=='$(webAppFrontContainerNamePROD)' && resourceGroup=='$(resourceGroupName)'] | length(@)" -o tsv | grep -q '^1$'; then
                        echo "The App Service for Front-End (PROD) does not exist. Creating..."
                        az webapp create --resource-group $(resourceGroupName) --plan $(appServicePlanLinux) --name $(webAppFrontContainerNamePROD) --deployment-container-image-name "nginx"
                      else
                        echo "The App Service for Front-End (PROD) already exists. Updating the image..."
                      fi

                      az webapp config container set --name $(webAppFrontContainerNamePROD) --resource-group $(resourceGroupName) \
                        --container-image-name $(acrLoginServer)/$(frontImageName):$(frontImageTag) \
                        --container-registry-url https://$(acrLoginServer) \
                        --container-registry-user $(acrName) \
                        --container-registry-password $(az acr credential show --name $(acrName) --query "passwords[0].value" -o tsv)

                      az webapp config appsettings set --name $(webAppFrontContainerNamePROD) --resource-group $(resourceGroupName) \
                        --settings API_URL="$(API_URL_QA)" \
