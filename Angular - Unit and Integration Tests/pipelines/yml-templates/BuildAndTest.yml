stages:
  - stage: BuildAndTest
    displayName: "Build Back-End and Front-End"
    dependsOn: []
    jobs:
      - job: BackEnd
        displayName: "Back-End"
        dependsOn: []
        steps:
          - task: DotNetCoreCLI@2
            displayName: "Restore NuGet Packages"
            inputs:
              command: restore
              projects: "$(solution)"

          # TODO: Check if it fails on failed tests
          - task: DotNetCoreCLI@2
            displayName: "Run Back-End Tests"
            inputs:
              command: "test"
              projects: "**/*.Tests.csproj"
              arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'
              continueOnError: false

          - task: PublishCodeCoverageResults@2
            displayName: "Publish Back-End Code Coverage Results"
            inputs:
              codeCoverageTool: "cobertura"
              summaryFileLocation: "$(Agent.TempDirectory)/**/coverage.cobertura.xml"
              failIfCoverageEmpty: false

          - task: DotNetCoreCLI@2
            displayName: "Build Back-End Solution"
            inputs:
              command: build
              projects: "$(solution)"
              arguments: "--configuration $(buildConfiguration)"

          - script: |
              dotnet publish $(solution) --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/api/ --no-build
            displayName: "Publish Back-End"

          - task: PublishBuildArtifacts@1
            displayName: "Publish Back-End Artifacts"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "backend-drop"
              publishLocation: "Container"

          - task: PublishPipelineArtifact@1
            displayName: "Publish Docker Back-End Artifacts"
            inputs:
              targetPath: "$(Build.SourcesDirectory)/docker/backend/Dockerfile"
              artifact: "dockerfile-back"

      - job: FrontEnd
        displayName: "Front-End"
        dependsOn: []
        steps:
          - task: UseNode@1
            displayName: "Install Node.js"
            inputs:
              version: "$(nodeVersion)"

          - script: |
              npm config set fund false
              npm install -g @angular/cli --no-audit
              npm install --no-audit
            displayName: "Install Front-End Dependencies"
            workingDirectory: $(frontPath)

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | $(frontPath)/package-lock.json'
              path: "$(frontPath)/node_modules"
              restoreKeys: |
                npm | "$(Agent.OS)"
            displayName: "Cache dependences"

          - script: |
              npx ng test --karma-config=karma.conf.js --watch=false --browsers ChromeHeadless --code-coverage
            displayName: "Run Front-End Tests"
            workingDirectory: $(frontPath)
            continueOnError: true

          - task: PublishCodeCoverageResults@2
            displayName: "Publish Front-End Code Coverage Results"
            inputs:
              summaryFileLocation: "$(frontPath)/coverage/lcov.info"
              failIfCoverageEmpty: false
            condition: always()

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "$(frontPath)/test-results/test-results.xml"
              failTaskOnFailedTests: true
            condition: always()
            displayName: "Publish Front-End Test Results"

          - script: |
              ng build --configuration production
            displayName: "Build Front-End Application"
            workingDirectory: $(frontPath)

          - task: PublishBuildArtifacts@1
            displayName: "Publish Front-End Artifacts"
            inputs:
              PathtoPublish: "$(frontPath)/dist/employee-crud-angular/browser"
              ArtifactName: "frontend-drop"
              publishLocation: "Container"

          - task: PublishPipelineArtifact@1
            displayName: "Publish Docker Front-End Artifacts"
            inputs:
              targetPath: "$(Build.SourcesDirectory)/docker/frontend/Dockerfile"
              artifact: "dockerfile-front"
